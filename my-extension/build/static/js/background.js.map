{"version":3,"file":"static/js/background.js","mappings":"mBAWAA,eAAeC,IACb,IACE,MAAMC,EAAmBC,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAC7CC,EAAiBJ,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAC3CE,EAAgCL,OAAOC,QAAQC,MAAMC,IAAI,CAC7D,oBAGIG,QAAwBP,EACxBQ,QAAsBH,EACtBI,QACEH,EACFI,EAAYH,EAAgBG,UAC5BC,EAAUH,EAAcG,QAG9B,MAAO,CAAED,YAAWC,UAASC,uBAFEH,EAA6BI,gBAG9D,CAAE,MAAOC,GACPC,QAAQD,MAAM,mCAAoCA,EACpD,CACF,CACAf,IACqBE,OAAOe,QAAQC,UAAUC,aAAaC,IACtC,YAAfA,EAAKC,QACPnB,OAAOC,QAAQC,MACZkB,IAAI,CAAEC,UAAWC,KAAKC,UAAUL,EAAKA,KAAKG,aAC1CG,MAAK,SAERxB,OAAOC,QAAQC,MAAMkB,IAAI,CAAEX,UAAWS,EAAKA,KAAKT,YAAae,MAAK,SAIlExB,OAAOC,QAAQC,MAAMkB,IAAI,CAAEV,QAASQ,EAAKA,KAAKR,UAAWc,MAAK,UAE7C,oBAAfN,EAAKC,OACPnB,OAAOC,QAAQC,MAAMkB,IAAI,CAAER,gBAAiBM,EAAKA,OAAQM,MAAK,QAChE,IAdK,MAiBDC,EAAe5B,MAAO6B,EAAqBC,KAC/C,IACE,GAAID,EAKF,OAJA1B,OAAO4B,UAAUC,cAAc,CAC7BC,OAAQ,CAAEC,MAAOJ,EAAeK,IAChCC,MAAO,CAAC,0BAEH,CAGX,CAAE,MAAOpB,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,GAGIqB,EAAeC,IACnBnC,OAAOoC,KAAKjC,IAAIgC,GAAKtC,UACnB,MAAMwC,QAAcvC,IACpBE,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAcqB,MAAMc,IAC5C,MAAMjB,EAAYiB,EAAOjB,UAEnBK,EAAiBJ,KAAKiB,MAAMlB,GAClC,IAAuB,IAAnBK,EAEF,YADAD,EAAaC,EAAgBC,GAI/B,IAAIa,EACJ,MAAMC,GA7EE,IAAIC,MAEQC,mBAAmB,QAAS,CAClDC,QAAQ,EACRC,KAAM,UACNC,OAAQ,YA2EJN,GADO,OAALH,QAAK,IAALA,OAAK,EAALA,EAAO5B,YAAagC,IAAoB,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAO3B,UAAW+B,EAMzDhB,EAAae,EAAYb,EAAe,GACxC,GACF,EAGJ3B,OAAOoC,KAAKW,YAAY9B,aAAY,SAAUkB,GAC5CD,EAAYC,EAAIJ,MAClB,IACA/B,OAAOoC,KAAKY,UAAU/B,aAAY,SAAUkB,EAAKc,GAC/Cf,EAAYC,EACd,G","sources":["background/index.ts"],"sourcesContent":["const getCurrentTime = () => {\n  const now = new Date();\n\n  const currentTime = now.toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n  return currentTime;\n};\n\nasync function getStorageValues() {\n  try {\n    const startTimePromise = chrome.storage.local.get([\"startTime\"]);\n    const endTimePromise = chrome.storage.local.get([\"endTime\"]);\n    const customWebsitesvToBlockPromise = chrome.storage.local.get([\n      \"websitesToBlock\",\n    ]);\n\n    const startTimeResult = await startTimePromise;\n    const endTimeResult = await endTimePromise;\n    const customWebsitesvToBlockResult: any =\n      await customWebsitesvToBlockPromise;\n    const startTime = startTimeResult.startTime;\n    const endTime = endTimeResult.endTime;\n    const customWebsitesvToBlock = customWebsitesvToBlockResult.websitesToBlock;\n\n    return { startTime, endTime, customWebsitesvToBlock };\n  } catch (error) {\n    console.error(\"Error retrieving storage values:\", error);\n  }\n}\ngetStorageValues();\nexport const value = chrome.runtime.onMessage.addListener((data) => {\n  if (data.event === \"onStart\") {\n    chrome.storage.local\n      .set({ isChecked: JSON.stringify(data.data.isChecked) })\n      .then(() => {});\n\n    chrome.storage.local.set({ startTime: data.data.startTime }).then(() => {\n      // Do something after the value is set\n      // Value is set- start time\n    });\n    chrome.storage.local.set({ endTime: data.data.endTime }).then(() => {});\n  }\n  if (data.event === \"websitesToBlock\") {\n    chrome.storage.local.set({ websitesToBlock: data.data }).then(() => {});\n  }\n});\n\nconst blockFeature = async (isCheckedValue: any, currentTabData: any) => {\n  try {\n    if (isCheckedValue) {\n      chrome.scripting.executeScript({\n        target: { tabId: currentTabData.id as any },\n        files: [\"static/js/content.js\"],\n      });\n      return 1;\n    } else {\n    }\n  } catch (error) {\n    console.error(\"Error parsing isChecked:\", error);\n  }\n};\n\nconst tabActivity = (tab: any) => {\n  chrome.tabs.get(tab, async (currentTabData) => {\n    const range = await getStorageValues();\n    chrome.storage.local.get([\"isChecked\"]).then((result) => {\n      const isChecked = result.isChecked;\n\n      const isCheckedValue = JSON.parse(isChecked);\n      if (isCheckedValue === true) {\n        blockFeature(isCheckedValue, currentTabData);\n        return;\n      }\n\n      let focusTimes;\n      const currentTime = getCurrentTime();\n\n      if (range?.startTime <= currentTime && range?.endTime >= currentTime) {\n        focusTimes = true;\n      } else {\n        focusTimes = false;\n      }\n\n      blockFeature(focusTimes, currentTabData);\n    });\n  });\n};\n\nchrome.tabs.onActivated.addListener(function (tab) {\n  tabActivity(tab.tabId);\n});\nchrome.tabs.onUpdated.addListener(function (tab, changeInfo) {\n  tabActivity(tab);\n});\n"],"names":["async","getStorageValues","startTimePromise","chrome","storage","local","get","endTimePromise","customWebsitesvToBlockPromise","startTimeResult","endTimeResult","customWebsitesvToBlockResult","startTime","endTime","customWebsitesvToBlock","websitesToBlock","error","console","runtime","onMessage","addListener","data","event","set","isChecked","JSON","stringify","then","blockFeature","isCheckedValue","currentTabData","scripting","executeScript","target","tabId","id","files","tabActivity","tab","tabs","range","result","parse","focusTimes","currentTime","Date","toLocaleTimeString","hour12","hour","minute","onActivated","onUpdated","changeInfo"],"sourceRoot":""}