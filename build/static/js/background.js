(()=>{"use strict";async function e(){try{const e=chrome.storage.local.get(["startTime"]),t=chrome.storage.local.get(["endTime"]),o=chrome.storage.local.get(["websitesToBlock"]),s=await e,a=await t,c=await o,i=s.startTime,n=a.endTime;return{startTime:i,endTime:n,customWebsitesvToBlock:c.websitesToBlock}}catch(e){console.error("Error retrieving storage values:",e)}}e();chrome.runtime.onMessage.addListener((e=>{"onStart"===e.event&&(chrome.storage.local.set({isChecked:JSON.stringify(e.data.isChecked)}).then((()=>{})),chrome.storage.local.set({startTime:e.data.startTime}).then((()=>{})),chrome.storage.local.set({endTime:e.data.endTime}).then((()=>{console.log("Value is set- end time",e.data.endTime)}))),"websitesToBlock"===e.event&&chrome.storage.local.set({websitesToBlock:e.data}).then((()=>{console.log("websitesToBlock 2,3,4",e.data)}))}));const t=async(t,o)=>{try{await e();if(console.log("Value currently is - isChecked",t),t)return chrome.scripting.executeScript({target:{tabId:o.id},files:["static/js/content.js"]}),1;console.log("need not be blocked")}catch(s){console.error("Error parsing isChecked:",s)}},o=o=>{chrome.tabs.get(o,(async o=>{const s=await e();chrome.storage.local.get(["isChecked"]).then((e=>{const a=e.isChecked,c=JSON.parse(a);if(!0===c)return console.log("timeeee",c),void t(c,o);let i;console.log("at the fn",s);const n=(new Date).toLocaleTimeString("en-US",{hour12:!1,hour:"2-digit",minute:"2-digit"});(null===s||void 0===s?void 0:s.startTime)<=n&&(null===s||void 0===s?void 0:s.endTime)>=n?(console.log("hereeeee-111"),i=!0):(console.log("hereeeee-222"),i=!1),console.log("the value I am sending",i),t(i,o)}))}))};chrome.tabs.onActivated.addListener((function(e){o(e.tabId)})),chrome.tabs.onUpdated.addListener((function(e,t){o(e)}))})();
//# sourceMappingURL=background.js.map