{"version":3,"file":"static/js/background.js","mappings":"mBAOAA,eAAeC,IACX,IACI,MAAMC,EAAmBC,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAC7CC,EAAiBJ,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAC3CE,EAA+BL,OAAOC,QAAQC,MAAMC,IAAI,CAAC,oBAEzDG,QAAwBP,EACxBQ,QAAsBH,EACtBI,QAA0CH,EAC1CI,EAAYH,EAAgBG,UAC5BC,EAAUH,EAAcG,QAG9B,MAAO,CAAED,YAAWC,UAASC,uBAFCH,EAA6BI,gBAG/D,CAAE,MAAOC,GACLC,QAAQD,MAAM,mCAAoCA,EACtD,CACJ,CACAf,IACqBE,OAAOe,QAAQC,UAAUC,aAAaC,IAGrC,YAAfA,EAAKC,QACJnB,OAAOC,QAAQC,MAAMkB,IAAI,CAAEC,UAAWC,KAAKC,UAAUL,EAAKA,KAAKG,aAAcG,MAAK,SAItFxB,OAAOC,QAAQC,MAAMkB,IAAI,CAAEX,UAAWS,EAAKA,KAAKT,YAAae,MAAK,SAIlExB,OAAOC,QAAQC,MAAMkB,IAAI,CAAEV,QAASQ,EAAKA,KAAKR,UAAWc,MAAK,KAC1DV,QAAQW,IAAI,yBAA0BP,EAAKA,KAAKR,QAAQ,KAG1C,oBAAfQ,EAAKC,OACJnB,OAAOC,QAAQC,MAAMkB,IAAI,CAAER,gBAAiBM,EAAKA,OAAQM,MAAK,KAC9DV,QAAQW,IAAI,wBAAyBP,EAAKA,KAAK,GAEnD,IApBG,MA2BDQ,EAAe7B,MAAM8B,EAAqBC,KAC5C,UACgC9B,IAK5B,GAFAgB,QAAQW,IAAI,iCAAkCE,GAE1CA,EAMR,OAJQ3B,OAAO6B,UAAUC,cAAc,CAC3BC,OAAQ,CAAEC,MAAOJ,EAAeK,IAChCC,MAAO,CAAC,0BAEb,EAECpB,QAAQW,IAAI,sBAGpB,CAAE,MAAOZ,GACLC,QAAQD,MAAM,2BAA4BA,EAC9C,GAGEsB,EAAeC,IACjBpC,OAAOqC,KAAKlC,IAAIiC,GAAKvC,UACzB,MAAMyC,QAAcxC,IACZE,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAcqB,MAAMe,IAC1C,MAAMlB,EAAYkB,EAAOlB,UAEnBM,EAAiBL,KAAKkB,MAAMnB,GAClC,IAAsB,IAAnBM,EAGF,OAFGb,QAAQW,IAAI,UAAUE,QACzBD,EAAaC,EAAgBC,GAK9B,IAAIa,EADJ3B,QAAQW,IAAI,YAAaa,GAEzB,MAAMI,GA1FF,IAAIC,MAEQC,mBAAmB,QAAS,CAAEC,QAAQ,EAAOC,KAAM,UAAWC,OAAQ,aA0F7E,OAALT,QAAK,IAALA,OAAK,EAALA,EAAO7B,YAAaiC,IAAoB,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAO5B,UAAWgC,GACrD5B,QAAQW,IAAI,gBACZgB,GAAa,IAEb3B,QAAQW,IAAI,gBACZgB,GAAa,GAEjB3B,QAAQW,IAAI,yBAA0BgB,GACtCf,EAAae,EAAYb,EAAe,GAE1C,GAKJ,EAGN5B,OAAOqC,KAAKW,YAAY/B,aAAY,SAAUmB,GAC1CD,EAAYC,EAAIJ,MACpB,IACAhC,OAAOqC,KAAKY,UAAUhC,aAAY,SAAUmB,EAAKc,GAC7Cf,EAAYC,EAChB,G","sources":["background/index.ts"],"sourcesContent":["const getCurrentTime = () => {\n    const now = new Date();\n  \n    const currentTime = now.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\n    return currentTime;\n}\n\nasync function getStorageValues() {\n    try {\n        const startTimePromise = chrome.storage.local.get([\"startTime\"]);\n        const endTimePromise = chrome.storage.local.get([\"endTime\"]);\n        const customWebsitesvToBlockPromise= chrome.storage.local.get([\"websitesToBlock\"])\n        \n        const startTimeResult = await startTimePromise;\n        const endTimeResult = await endTimePromise;\n        const customWebsitesvToBlockResult: any = await customWebsitesvToBlockPromise;\n        const startTime = startTimeResult.startTime;\n        const endTime = endTimeResult.endTime;\n        const customWebsitesvToBlock= customWebsitesvToBlockResult.websitesToBlock\n\n        return { startTime, endTime, customWebsitesvToBlock}\n    } catch (error) {\n        console.error(\"Error retrieving storage values:\", error);\n    }\n}\ngetStorageValues()\nexport const value = chrome.runtime.onMessage.addListener((data) => {\n\n  \n    if(data.event === \"onStart\"){\n        chrome.storage.local.set({ isChecked: JSON.stringify(data.data.isChecked) }).then(() => {\n        // console.log(\"Value is set\", data.data.isChecked);\n    });\n\n    chrome.storage.local.set({ startTime: data.data.startTime }).then(() => {\n        // Do something after the value is set\n        // Value is set- start time\n    });\n    chrome.storage.local.set({ endTime: data.data.endTime }).then(() => {\n        console.log(\"Value is set- end time\", data.data.endTime);\n    });\n    }\n    if(data.event === \"websitesToBlock\"){\n        chrome.storage.local.set({ websitesToBlock: data.data }).then(() => {\n        console.log(\"websitesToBlock 2,3,4\", data.data);\n    });\n    }\n    \n    \n\n\n});\n\nconst blockFeature = async(isCheckedValue: any, currentTabData: any) => {\n    try {\n        const storageValues=  await getStorageValues()\n\n\n        console.log(\"Value currently is - isChecked\", isCheckedValue);\n\n        if (isCheckedValue){\n        \n            chrome.scripting.executeScript({\n                target: { tabId: currentTabData.id as any },\n                files: ['static/js/content.js'],\n            });\n    return 1;\n    } else {\n            console.log(\"need not be blocked\");\n            \n        }\n    } catch (error) {\n        console.error(\"Error parsing isChecked:\", error);\n    }\n}\n\nconst tabActivity = (tab: any) => {\n    chrome.tabs.get(tab, async (currentTabData) => {\nconst range = await getStorageValues();\n        chrome.storage.local.get([\"isChecked\"]).then((result) => {\n            const isChecked = result.isChecked;\n            \n            const isCheckedValue = JSON.parse(isChecked);\n            if(isCheckedValue === true){\n                console.log(\"timeeee\",isCheckedValue);\n             blockFeature(isCheckedValue, currentTabData)\n             return;\n            }\n            \n            console.log(\"at the fn\", range)\n            let focusTimes;\n            const currentTime = getCurrentTime();\n      \n            if (range?.startTime <= currentTime && range?.endTime >= currentTime) {\n                console.log(\"hereeeee-111\")\n                focusTimes = true;\n            } else {\n                console.log(\"hereeeee-222\")\n                focusTimes = false;\n            }\n            console.log(\"the value I am sending\", focusTimes);\n            blockFeature(focusTimes, currentTabData);\n            \n        });\n\n\n\n\n    });\n}\n\nchrome.tabs.onActivated.addListener(function (tab) {\n    tabActivity(tab.tabId)\n});\nchrome.tabs.onUpdated.addListener(function (tab, changeInfo) {\n    tabActivity(tab)\n});\n\n\n\n\n\n"],"names":["async","getStorageValues","startTimePromise","chrome","storage","local","get","endTimePromise","customWebsitesvToBlockPromise","startTimeResult","endTimeResult","customWebsitesvToBlockResult","startTime","endTime","customWebsitesvToBlock","websitesToBlock","error","console","runtime","onMessage","addListener","data","event","set","isChecked","JSON","stringify","then","log","blockFeature","isCheckedValue","currentTabData","scripting","executeScript","target","tabId","id","files","tabActivity","tab","tabs","range","result","parse","focusTimes","currentTime","Date","toLocaleTimeString","hour12","hour","minute","onActivated","onUpdated","changeInfo"],"sourceRoot":""}